{"version":3,"sources":["components/TimerContainer.js","components/Emoticon.js","App.js","serviceWorker.js","index.js"],"names":["data","name","value","COLORS","TimerContainer","this","props","timeRemain","totalTime","endAngle","fillColor","Math","floor","length","Fragment","className","style","color","width","height","cx","cy","startAngle","innerRadius","outerRadius","fill","paddingAngle","dataKey","animationDuration","map","entry","index","key","React","Component","happyEmos","angryEmos","currentEmo","random","App","componentDidMount","setInterval","setState","state","reset","audio","Audio","play","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAIMA,G,OAAO,CACX,CAAEC,KAAM,UAAWC,MAAO,KAC1B,CAAED,KAAM,UAAWC,MAAO,KAC1B,CAAED,KAAM,UAAWC,MAAO,KAC1B,CAAED,KAAM,UAAWC,MAAO,OAEtBC,EAAS,CAAC,UAAW,UAAW,UAAW,WAE5BC,E,iLACT,IAAD,EAC2BC,KAAKC,MAA/BC,EADD,EACCA,WAAYC,EADb,EACaA,UACdC,EAAW,IAAMF,GAAc,IAAMC,GAErCE,EACJH,EAAa,EACTJ,EAAOQ,KAAKC,OAAOL,EAAa,IAAMC,EAAY,IAAML,EAAOU,QAC/D,MACN,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,0BACb,yBAAKA,UAAU,eAAeC,MAAO,CAAEC,MAAOP,IAC3CH,IAIL,kBAAC,IAAD,CAAUW,MAAO,IAAKC,OAAQ,KAC5B,kBAAC,IAAD,CACEnB,KAAMA,EACNoB,GAAI,IACJC,GAAI,IACJC,WAAY,IACZb,SAAUA,EACVc,YAAa,GACbC,YAAa,IACbC,KAAK,UACLC,aAAc,EACdC,QAAQ,QACRC,kBAAmB,KAElB5B,EAAK6B,KAAI,SAACC,EAAOC,GAAR,OACR,kBAAC,IAAD,CAAMC,IAAG,eAAUD,GAASN,KAAMf,c,GAhCJuB,IAAMC,WCV5CC,EAAY,CAAC,eAAW,+CAAa,wBAAS,uBAAS,8BAAW,iCAClEC,EAAY,CAAC,gBAAO,qBAAO,eAAU,qBAAU,6BAAS,iBAEzChC,E,iLACT,IAEJiC,EAAa,GAOjB,OAJEA,EAJqBhC,KAAKC,MAApBC,WAGS,EACF4B,EAAUxB,KAAKC,MAAMD,KAAK2B,SAASH,EAAUtB,SAE7CuB,EAAUzB,KAAKC,MAAMD,KAAK2B,SAASF,EAAUvB,SAG1D,yBAAKE,UAAU,iBACZsB,O,GAZmCJ,IAAMC,WC4CnCK,E,YA3Cb,WAAYjC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRkC,kBAAoB,WAClBC,aACE,kBACE,EAAKC,SAAS,CACZnC,WAAY,EAAKoC,MAAMpC,WAAa,MAExC,MAfe,EAmBnBqC,MAAQ,WACN,EAAKF,SAAS,CAAEnC,WAAY,EAAKoC,MAAMnC,aAlBvC,EAAKqC,MAAQ,IAAIC,MAAM,UACvB,EAAKH,MAAQ,CACXnC,UAAW,GACXD,WAAY,IALG,E,sEA2BjB,OAH8B,IAA1BF,KAAKsC,MAAMpC,YACbF,KAAKwC,MAAME,OAGX,yBAAKhC,UAAU,kBACb,yBAAKA,UAAU,kBAAkBiC,QAAS3C,KAAKuC,OAC7C,kBAAC,EAAD,CACErC,WAAYF,KAAKsC,MAAMpC,WACvBC,UAAWH,KAAKsC,MAAMnC,aAG1B,yBAAKO,UAAU,iBACb,kBAAC,EAAD,CAAUR,WAAYF,KAAKsC,MAAMpC,mB,GArCzB0B,IAAMC,WCOJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f72792b2.chunk.js","sourcesContent":["import React from \"react\";\nimport { PieChart, Pie, Cell } from \"recharts\";\nimport \"./TimerContainer.css\";\n\nconst data = [\n  { name: \"Group A\", value: 200 },\n  { name: \"Group B\", value: 200 },\n  { name: \"Group C\", value: 200 },\n  { name: \"Group D\", value: 200 }\n];\nconst COLORS = [\"#FF8042\", \"#FFBB28\", \"#00C49F\", \"#0088FE\"];\n\nexport default class TimerContainer extends React.Component {\n  render() {\n    const { timeRemain, totalTime } = this.props;\n    const endAngle = 180 - timeRemain * (360 / totalTime);\n\n    const fillColor =\n      timeRemain > 0\n        ? COLORS[Math.floor((timeRemain - 1) / (totalTime / 4)) % COLORS.length]\n        : \"red\";\n    return (\n      <React.Fragment>\n        <div className=\"number-count-container\">\n          <div className=\"number-count\" style={{ color: fillColor }}>\n            {timeRemain}\n          </div>\n        </div>\n\n        <PieChart width={300} height={300}>\n          <Pie\n            data={data}\n            cx={150}\n            cy={150}\n            startAngle={180}\n            endAngle={endAngle}\n            innerRadius={90}\n            outerRadius={120}\n            fill=\"#8884d8\"\n            paddingAngle={2}\n            dataKey=\"value\"\n            animationDuration={600}\n          >\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={fillColor} />\n            ))}\n          </Pie>\n        </PieChart>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\r\n\r\nconst happyEmos = ['(*^▽^*)', '٩(✿∂‿∂✿)۶', '(*≧▽≦)','(•‿•)', '( ⋂‿⋂’)', '( ´͈ ◡ `͈ )'];\r\nconst angryEmos = ['ಠ_ಠ', 'ಠ▃ಠ', '(;¬_¬)', '(;° ロ°)','(๑•﹏•)','◑.◑'];\r\n\r\nexport default class TimerContainer extends React.Component {\r\n  render() {\r\n    const { timeRemain } = this.props;\r\n    let currentEmo = '';\r\n\r\n    if (timeRemain > 0) {\r\n      currentEmo = happyEmos[Math.floor(Math.random()*happyEmos.length)];\r\n    } else {\r\n      currentEmo = angryEmos[Math.floor(Math.random()*angryEmos.length)];\r\n    }\r\n    return (\r\n      <div className='emo-container'>\r\n        {currentEmo}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TimerContainer from \"./components/TimerContainer\";\nimport Emoticon from \"./components/Emoticon\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.audio = new Audio(\"go.mp3\");\n    this.state = {\n      totalTime: 60,\n      timeRemain: 60\n    };\n  }\n\n  componentDidMount = () => {\n    setInterval(\n      () =>\n        this.setState({\n          timeRemain: this.state.timeRemain - 1\n        }),\n      1000\n    );\n  };\n\n  reset = () => {\n    this.setState({ timeRemain: this.state.totalTime });\n  };\n\n  render() {\n    if (this.state.timeRemain === 0) {\n      this.audio.play();\n    }\n    return (\n      <div className=\"main-container\">\n        <div className=\"chart-container\" onClick={this.reset}>\n          <TimerContainer\n            timeRemain={this.state.timeRemain}\n            totalTime={this.state.totalTime}\n          />\n        </div>\n        <div className=\"emo-container\">\n          <Emoticon timeRemain={this.state.timeRemain} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}