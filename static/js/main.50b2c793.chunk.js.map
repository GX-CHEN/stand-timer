{"version":3,"sources":["components/TimerContainer.js","components/Emoticon.js","components/Selector.js","App.js","serviceWorker.js","index.js"],"names":["data","name","value","COLORS","TimerContainer","this","props","timeRemain","totalTime","endAngle","showGif","fillColor","Math","floor","length","Fragment","className","style","color","src","imgSrc","alt","width","height","cx","cy","startAngle","innerRadius","outerRadius","fill","paddingAngle","dataKey","animationDuration","map","entry","index","key","React","Component","happyEmos","angryEmos","currentEmo","random","Selector","durationClick","menu","Item","onClick","overlay","placement","size","finalGifs","App","componentDidMount","setInterval","setState","state","reset","urlParams","URLSearchParams","window","location","search","isJack","get","audio","Audio","play","seconds","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.50b2c793.chunk.js","sourcesContent":["import React from \"react\";\nimport { PieChart, Pie, Cell } from \"recharts\";\nimport \"./TimerContainer.css\";\n\nconst data = [\n  { name: \"Group A\", value: 200 },\n  { name: \"Group B\", value: 200 },\n  { name: \"Group C\", value: 200 },\n  { name: \"Group D\", value: 200 }\n];\nconst COLORS = [\"#FF8042\", \"#FFBB28\", \"#00C49F\", \"#0088FE\"];\n\nexport default class TimerContainer extends React.Component {\n  render() {\n    const { timeRemain, totalTime } = this.props;\n    const endAngle = 180 - timeRemain * (360 / totalTime);\n    const showGif = timeRemain < 1 && timeRemain > -6;\n\n    const fillColor =\n      timeRemain > 0\n        ? COLORS[Math.floor((timeRemain - 1) / (totalTime / 4)) % COLORS.length]\n        : \"red\";\n    return (\n      <React.Fragment>\n        <div className=\"number-count-container\">\n          <div className=\"number-count\" style={{ color: fillColor }}>\n            {timeRemain}\n          </div>\n        </div>\n\n        {showGif && (\n          <div className=\"gif-container\">\n            <img src={this.props.imgSrc} alt=\"time is up\" className=\"gif-img\" />\n          </div>\n        )}\n\n        {!showGif && (\n          <PieChart width={260} height={260}>\n            <Pie\n              data={data}\n              cx={130}\n              cy={130}\n              startAngle={180}\n              endAngle={endAngle}\n              innerRadius={90}\n              outerRadius={120}\n              fill=\"#8884d8\"\n              paddingAngle={2}\n              dataKey=\"value\"\n              animationDuration={600}\n            >\n              {data.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={fillColor} />\n              ))}\n            </Pie>\n          </PieChart>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\r\n\r\nconst happyEmos = [\r\n  \"(*^▽^*)\",\r\n  \"٩(✿∂‿∂✿)۶\",\r\n  \"(*≧▽≦)\",\r\n  \"(•‿•)\",\r\n  \"( ⋂‿⋂’)\",\r\n  \"( ´͈ ◡ `͈ )\"\r\n];\r\nconst angryEmos = [\"ಠ_ಠ\", \"ಠ▃ಠ\", \"(;¬_¬)\", \"(;° ロ°)\", \"(๑•﹏•)\", \"◑.◑\"];\r\n\r\nexport default class TimerContainer extends React.Component {\r\n  render() {\r\n    const { timeRemain, totalTime } = this.props;\r\n    let currentEmo = \"\";\r\n\r\n    if (timeRemain < 0) {\r\n      currentEmo = angryEmos[Math.floor(Math.random() * angryEmos.length)];\r\n    } else if (totalTime / timeRemain > 4) {\r\n      currentEmo = <div style={{ color: \"#FF8042\" }}>\"⊙△⊙\"</div>;\r\n    } else {\r\n      currentEmo = happyEmos[Math.floor(Math.random() * happyEmos.length)];\r\n    }\r\n    return <div className=\"emo-container\">{currentEmo}</div>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Dropdown, Menu, Button } from \"antd\";\r\n\r\nexport default class Selector extends React.Component {\r\n  render() {\r\n    const { durationClick, totalTime } = this.props;\r\n    const menu = (\r\n      <Menu>\r\n        <Menu.Item\r\n          onClick={() => durationClick(180)}\r\n          className=\"centered large-font\"\r\n        >\r\n          180\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          onClick={() => durationClick(120)}\r\n          className=\"centered large-font\"\r\n        >\r\n          120\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          onClick={() => durationClick(60)}\r\n          className=\"centered large-font\"\r\n        >\r\n          60\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          onClick={() => durationClick(30)}\r\n          className=\"centered large-font\"\r\n        >\r\n          30\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          onClick={() => durationClick(10)}\r\n          className=\"centered large-font\"\r\n        >\r\n          10\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n\r\n    return (\r\n      <Dropdown overlay={menu} placement=\"bottomCenter\">\r\n        <Button size=\"large\">{totalTime} sec</Button>\r\n      </Dropdown>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport TimerContainer from \"./components/TimerContainer\";\nimport Emoticon from \"./components/Emoticon\";\nimport Selector from \"./components/Selector\";\n\nconst finalGifs = [\n  \"./images/minion-what.gif\",\n  \"./images/timeup.gif\",\n  \"./images/too-much-info.gif\",\n  \"./images/please-stop.gif\"\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.audio = new Audio(\"timeup.mp3\");\n    this.state = {\n      totalTime: 60,\n      timeRemain: 60,\n      imgSrc: finalGifs[Math.floor(Math.random() * finalGifs.length)]\n    };\n  }\n\n  componentDidMount = () => {\n    setInterval(\n      () =>\n        this.setState({\n          timeRemain: this.state.timeRemain - 1\n        }),\n      1000\n    );\n  };\n\n  reset = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const isJack = urlParams ? urlParams.get(\"mode\") === \"jack\" : false;\n\n    this.setState({\n      timeRemain: this.state.totalTime,\n      imgSrc: isJack\n        ? \"./images/jack.gif\"\n        : finalGifs[Math.floor(Math.random() * finalGifs.length)]\n    });\n  };\n\n  render() {\n    if (this.state.timeRemain === 0) {\n      this.audio.play();\n    }\n    return (\n      <div className=\"main-container\">\n        <div className=\"selector-container\">\n          <Selector\n            totalTime={this.state.totalTime}\n            durationClick={seconds => {\n              this.setState({\n                totalTime: seconds,\n                timeRemain: seconds,\n                imgSrc: finalGifs[Math.floor(Math.random() * finalGifs.length)]\n              });\n            }}\n          />\n        </div>\n        <div className=\"chart-container\" onClick={this.reset}>\n          <TimerContainer\n            timeRemain={this.state.timeRemain}\n            totalTime={this.state.totalTime}\n            imgSrc={this.state.imgSrc}\n          />\n        </div>\n        <div className=\"emo-container\" onClick={this.reset}>\n          <Emoticon\n            timeRemain={this.state.timeRemain}\n            totalTime={this.state.totalTime}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}